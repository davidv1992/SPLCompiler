\part{Interface utilities}
\chapter{Compiler proper}

This file does all the chaining of the various parts of the compiler. It is responsible for calling the different parts of the compiler in the right order.

\section{Global settings}

We start with a few global settings, controlling the output architecture, and whether the compiler will also take care of linking and such.

<<compiler settings>>=
#define ARCH_FLAG {"", "arch", \
	"Target specified processor architecture."}
#define ARCH_OPTS {"amd64"}
COMPILER_SETTING(opt_enum, targetArch, "amd64", ARCH_FLAG, ARCH_OPTS)
#undef ARCH_FLAG
#undef ARHC_OPTS

#define OPTIMIZE_FLAG {"", "optimize", "Enable optimizations."}
COMPILER_SETTING(bool, enableOptimize, false, OPTIMIZE_FLAG, {})
#undef OPTIMIZE_FLAG

#define ASSEMBLY_FLAG {"", "S", "Generate assembly code."}
COMPILER_SETTING(bool, assemblyOnly, false, ASSEMBLY_FLAG, {})
#undef ASSEMLBY_FLAG

#define OUTPUTFILE_FLAG {"", "o", "Target output file."}
COMPILER_SETTING(std::string, outputFile, "", OUTPUTFILE_FLAG, {})
#undef OUTPUTFILE_FLAG
@

\section{Compiler proper}

These settings are read in from the commandline, along with imput files. We then ensure that we have precisely one input file.

<<handle commandline>>=
vector<string> inputfiles = parse_commandline(argc, argv);
	
if (inputfiles.size() != 1)
	main_fatal("Incorrect number of input files");
@

When not provided, we need to generate an input file. This is dependent on both target and whether or not we link.

<<generate output name>>=
if (outputFile == "")
{
	if (!assemblyOnly)
		outputFile = "a.out";
	else
		outputFile = "out.s";
}
@

The first steps in compilation (tokenizing, parsing, typechecking and IR generation) are platform independend, and more importantly, always needed.

<<compile to optimized IR>>=
tok_setinput(inputfiles[0]);

main_info("Parsing input.");
ast_program *program = parse_program();

main_info("Typechecking program.");
typecheck_program(program);

if (eh_haveerror())
	return 1;

main_info("Generating intermediate code.");
ir_module *module = irgen_translate_program(program);

main_info("Generating runtime.");
generate_runtime(module);

main_info("Post-frontend cleanup");
typecheck_cleanup();
delete program;

if (enableOptimize)
{
	main_info("Optimizing.");
	main_info("Opitimization: Constant propagation.");
	cp_rewrite_module(module);
}
@

Finally, everything produced here needs to be cleaned up:

<<module cleanup>>=
delete module;
@

The other steps are platform dependend, hence handled seperatly. Chaining everything together:

<<compiler main>>=
int main(int argc, char **argv)
{
	<<handle commandline>>
	<<generate output name>>
	<<compile to optimized IR>>
	
	if (targetArch == "amd64")
	{
		<<amd64 output generation>>
	}
	else
	{
		assert(0);
	}
	
	<<module cleanup>>
	
	return 0;
}
@

\subsection{AMD64 Output}

AMD64 is a bit more involved, because we dont directly produce machine code. Instead, we output to a temporary file and pass that on to the assembler if we need to produce an executable.

<<amd64 output generation>>=
main_info("Generating AMD64 assembly.");
string assemblyFileName;

if (assemblyOnly)
	assemblyFileName = outputFile;
else
	assemblyFileName = tmpnam(NULL);

main_info("Assembly intermediate file: %s", assemblyFileName.c_str());

FILE *assemblyFile = fopen(assemblyFileName.c_str(), "w");

if (assemblyFile == NULL)
	main_fatal("Cannot open assembly file %s", assemblyFileName.c_str());

amd64_translate_module(module, assemblyFile);

fclose(assemblyFile);

if (!assemblyOnly)
{
	main_info("Compiling final program.");
	ostringstream compileCommand;
	compileCommand << "gcc"
		<< " -x assembler " << assemblyFileName 
		<< " -x c cplatform.c"
		<< " -o " << outputFile;
	main_info("Compile command: %s", compileCommand.str().c_str());
	system(compileCommand.str().c_str());
}
@

\section{Error handling}

Following the tried and true patterns, with empty position info for fatals, since in this scope they do not relate to any particular position in the source.

<<main error handling>>=
void main_info(const char *message, ...)
{
	va_list args;
	va_start(args, message);
	
	eh_info(message, args);
	
	va_end(args);
}

void main_fatal(const char *message, ...)
{
	va_list args;
	va_start(args, message);
	
	source_position pos;
	pos.filename="";
	pos.lineno = pos.offset = 0;
	
	eh_error(pos, message, args);
	
	va_end(args);
	
	exit(1);
}
@

\section{source}

<<main.cpp>>=
#include "token.h"
#include "parser.h"
#include "typecheck.h"
#include "position.h"
#include "ir.h"
#include "irgeneration.h"
#include "splruntime.h"
#include "settings.h"
#include "amd64.h"
#include "error.h"
#include "constprop.h"
#include <cstdio>
#include <map>
#include <cstdarg>
#include <sstream>
#include <cassert>

using namespace std;

<<main error handling>>

<<compiler main>>
@

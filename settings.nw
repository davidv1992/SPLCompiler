\chapter{Settings}

\section{Setting datafield}

Compiler settings are registered in the various parts of the compiler using the COMPILER\_SETTING macro. Calls to it have the following format:
\begin{mathpar}
\text{COMPILER\_SETTING} (\text{\emph{type}}, \text{\emph{variable}}, \text{\emph{default\_value}}, \text{\emph{flags}})
\end{mathpar}

Type and variable specify the type and variable name that provide the settings data to the rest of the compiler. The default value provides it's value when the settings are not yet read or when it is not given on the commandline. For the interpretation of the macro in this file, it is very important that a semicolon is NOT used to terminate the macro call.

Calls to this macro (and only calls to this macro) are added to the special \textless\textless compiler settings\textgreater\textgreater\ environment. This environment is then included everywhere the list is needed and the macro calls preprocessed to the form needed there.

\section{Temporary variable declarations}

<<config variable declarations>>=
#define COMPILER_SETTING(type, variable, default_value, flags) extern type variable;
<<compiler settings>>
#undef COMPILER_SETTING
@

<<config variable definitions>>=
#define COMPILER_SETTING(type, variable, default_value, flags) type variable = default_value;
<<compiler settings>>
#undef COMPILER_SETTING
@

\section{Header and source file}

Generating the actual code:
<<settings.h>>=
#ifndef SETTINGS_H
#define SETTINGS_H
<<config variable declarations>>
#endif
@

<<settings.cpp>>=
<<config variable definitions>>
@

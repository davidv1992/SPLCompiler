\chapter{Abstract Syntax trees}
\label{ch:ast}

The end result of parsing is an abstract syntax tree. This tree contains all the known information on the source, and is decorated with extra information in later stages of the compiler.

\section{Implementation strategy}
Abstract syntax trees are implemented using classes for each of the nodes. Each node is responsible for managing the memory used by itself and its subtrees. Upon passing pointers of an ast to a constructor for a node, that node acquires ownership of the memory associated with the ast, and should free it when it gets deleted. Also, each node is able to print a human-readable representation of itsef. Using c++ classes with inheritance means that it is possible to distinguish between various types of subclasses using the typeid operator.

<<ast base>>=
class ast_base
{
public:
	source_position position;

	virtual ~ast_base(){};
	virtual void print(int tabdepth)=0;
	virtual ast_base *copy()=0;
};
@

The ast\_base defined here is only used to describe the common part of the functionality, and is not used as pointer type in the rest of the ast. When more general pointers are needed at some point of an ast, subclasses that categorize precisely what is allowed there are used. This means that as long as we dont do any questionable casts, an ast is guaranteed to be at least reasonably sensible.

\section{Type ast}
Types inherit from ast\_type, the subclass representing types. These classes are a decent representation of types, and are thus used also at other stages.
<<type expression ast>>=
class ast_type : public ast_base
{
};
<<simple types>>
<<list types>>
<<tuple types>>
<<builtin types>>
<<emptylist type>>
@

A simple type is a type specifier consisting only of a single identifier.
<<simple types>>=
class ast_simple_type : public ast_type
{
public:
	std::string type_id;

	ast_simple_type(source_position pos, std::string _id) 
		{ position = pos; type_id=_id; }
	virtual ~ast_simple_type() {}
	virtual void print(int tabdepth) {printf("%s", type_id.c_str());}
	virtual ast_base *copy() { return new ast_simple_type(position, type_id); }
};
@

Tuples contain two subtypes, one for each of the fields in them.
<<tuple types>>=
class ast_tuple_type : public ast_type
{
public:
	ast_type *type_first, *type_second;

	ast_tuple_type(source_position pos, ast_type *first, ast_type *second)
	{
		position = pos;
		type_first = first; 
		type_second = second;
	}
	virtual ~ast_tuple_type() 
	{
		delete type_first; 
		delete type_second;
	}
	virtual void print(int tabdepth)
	{
		printf("(");
		type_first->print(tabdepth);
		printf(",");
		type_second->print(tabdepth);
		printf(")");
	}
	virtual ast_base *copy()
	{
		return new ast_tuple_type(position, 
			(ast_type*)type_first->copy(), 
			(ast_type*)type_second->copy());
	}
};
@

List contain only one subtype, the element they contain.
<<list types>>=
class ast_list_type : public ast_type
{
public:
	ast_type *type_element;

	ast_list_type(source_position pos, ast_type *el) 
		{ position = pos; type_element = el; }
	virtual ~ast_list_type() { delete type_element; }
	virtual void print(int tabdepth)
	{
		printf("[");
		type_element->print(tabdepth);
		printf("]");
	}
	virtual ast_base *copy()
	{
		return new ast_list_type(position, 
			(ast_type*)type_element->copy());
	}
};
@

For type checking, it is usefull to have special nodes for the builtin types. These provide this
<<builtin types>>=
class ast_void_type : public ast_type
{
public:
	virtual ~ast_void_type() {}
	virtual void print(int tabdepth) { printf("Void"); }
	virtual ast_base *copy() { return new ast_void_type(); }
};
class ast_int_type : public ast_type
{
public:
	virtual ~ast_int_type() {}
	virtual void print(int tabdepth) { printf("Int"); }
	virtual ast_base *copy() { return new ast_int_type(); }
};
class ast_char_type : public ast_type
{
public:
	virtual ~ast_char_type() {}
	virtual void print(int tabdepth) { printf("Char"); }
	virtual ast_base *copy() { return new ast_char_type(); }
};
class ast_bool_type : public ast_type
{
public:
	virtual ~ast_bool_type() {}
	virtual void print(int tabdepth) { printf("Bool"); }
	virtual ast_base *copy() { return new ast_bool_type(); }
};
@

Finally, it is very usefull for typechecking to have a special type for unknowns.
<<emptylist type>>=
class ast_unknown_type : public ast_type
{
public:
	virtual ~ast_unknown_type() {}
	virtual void print(int tabdepth) { printf("Unknown"); }
	virtual ast_base *copy() { return new ast_unknown_type(); }
};
@

\section{Expression ast}
The ast representing expressions is straightforward, but of significant size.

For operators, the abstract syntax objects are the same for all operators with the same arity. The actual op used in that particular node is then encoded in a variable from one of the following enum types.
<<operator types>>=
enum ast_binary_operator {
	OP_ADD,
	OP_SUB,
	OP_MUL,
	OP_DIV,
	OP_MOD,
	
	OP_AND,
	OP_OR,
	
	OP_EQ,
	OP_NE,
	OP_LT,
	OP_GT,
	OP_LE,
	OP_GE,
	
	OP_COLON,
};
enum ast_unary_operator{
	OP_NEG,
	OP_NOT,
};
@

It is very usefull for pretty-printing the ast and error messages to be able to convert the enum types above to string representations:
<<operator to string header>>=
std::string ast_operator_string(ast_binary_operator op);
std::string ast_operator_string(ast_unary_operator op);
@
<<expression ast operator to string>>=
string ast_operator_string(ast_binary_operator op)
{
	switch(op)
	{
	case OP_ADD:
		return "+";
	case OP_SUB:
		return "-";
	case OP_MUL:
		return "*";
	case OP_DIV:
		return "/";
	case OP_MOD:
		return "%";
	
	case OP_AND:
		return "&&";
	case OP_OR:
		return "||";
	
	case OP_EQ:
		return "==";
	case OP_NE:
		return "!=";
	case OP_LT:
		return "<";
	case OP_GT:
		return ">";
	case OP_LE:
		return "<=";
	case OP_GE:
		return ">=";
	
	case OP_COLON:
		return ":";
	}
	
	return "";
}

string ast_operator_string(ast_unary_operator op)
{
	switch(op)
	{
	case OP_NEG:
		return "-";
	case OP_NOT:
		return "!";
	}
	
	return "";
}
@

The actual nodes representing the operators are quite straightforward now, using the above operator types to represent the specific operator used in the node.
<<operator ast>>=
class ast_expression_binary : public ast_expression
{
public:
	ast_expression *left, *right;
	ast_binary_operator op;
	
	ast_expression_binary(source_position pos, ast_binary_operator _op, 
		ast_expression *l, ast_expression *r) 
		{ position = pos, op =_op; left = l; right = r; }
	virtual ~ast_expression_binary() { delete left; delete right; }
	virtual void print(int tabdepth) {
		printf("(");
		left->print(tabdepth);
		printf("%s", ast_operator_string(op).c_str());
		right->print(tabdepth);
		printf(")");
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_expression_binary(position, op,
			(ast_expression*)left->copy(),
			(ast_expression*)right->copy());
	}
};
class ast_expression_unary : public ast_expression
{
public:
	ast_expression *inner;
	ast_unary_operator op;
	
	ast_expression_unary(source_position pos, ast_unary_operator _op, 
		ast_expression *i) 
		{ position = pos; op = _op; inner = i;}
	virtual ~ast_expression_unary() {delete inner;}
	virtual void print(int tabdepth) {
		printf("(%s", ast_operator_string(op).c_str());
		inner->print(tabdepth);
		printf(")");
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_expression_unary(position, op,
			(ast_expression*)inner->copy());
	}
};
@

Variable accesses are either for an entire variable itself, or some field of it:
<<variable read ast>>=
class ast_expression_variable : public ast_expression
{
};
class ast_expression_variable_base : public ast_expression_variable
{
public:
	std::string id;
	ast_statement_vardecl *declaration=NULL; //Reference only, no ownership
	ast_funarg *funargdecl = NULL; //Reference only, no ownership
	
	ast_expression_variable_base(source_position pos, std::string _id) 
		{ position = pos; id = _id;}
	virtual ~ast_expression_variable_base(){}
	virtual void print(int tabdepth)
	{
		printf("%s", id.c_str());
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_expression_variable_base(position, id);
	}
};
class ast_expression_variable_field : public ast_expression_variable
{
public:
	ast_expression_variable *base;
	std::string field;
	
	ast_expression_variable_field(ast_expression_variable *b, std::string f) 
		{ position = b->position; base = b; field = f; }
	virtual ~ast_expression_variable_field() { delete base; }
	virtual void print(int tabdepth)
	{ 
		base->print(tabdepth);
		printf(".%s", field.c_str());
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_expression_variable_field(
			(ast_expression_variable*)base->copy(), field);
	}
};
@

For functioncalls we just use a vector for the list of arguments to it:
<<funcall expression ast>>=
class ast_expression_funcall : public ast_expression
{
public:
	std::string id;
	std::vector<ast_expression*> arguments;
	
	ast_expression_funcall(source_position pos, 
		std::string fn, std::vector<ast_expression*> args) 
		{ position = pos; id=fn; arguments = args; }
	virtual ~ast_expression_funcall() { for (auto ptr : arguments) delete ptr; }
	virtual void print(int tabdepth) {
		bool firstArg = true;
		printf("%s(", id.c_str());
		for (auto ptr : arguments)
		{
			if (firstArg)
				firstArg = false;
			else
				printf(", ");
			ptr->print(tabdepth);
		}
		printf(")");
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		std::vector<ast_expression*> argcopy;
		for (auto ptr : arguments) argcopy.push_back(
			(ast_expression*)ptr->copy());
		
		return new ast_expression_funcall(position, id, argcopy);
	}
};
@

Representing constants require only the value of them to be availabe:
<<constant expression ast>>=
class ast_expression_intconst : public ast_expression
{
public:
	unsigned int value;
	
	ast_expression_intconst(source_position pos, unsigned int v) 
		{position = pos, value = v;}
	virtual ~ast_expression_intconst() {}
	virtual void print(int tabdepth)
	{
		printf("%d", value);
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_expression_intconst(position, value);
	}
};
class ast_expression_charconst : public ast_expression
{
public:
	char value;
	
	ast_expression_charconst(source_position pos, char v) 
		{ position = pos; value = v; }
	virtual ~ast_expression_charconst() {}
	virtual void print(int tabdepth)
	{
		printf("'%c'", value);
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_expression_charconst(position, value);
	}
};
class ast_expression_emptylist : public ast_expression
{
public:
	ast_expression_emptylist(source_position pos)
		{position = pos;}
	virtual ~ast_expression_emptylist(){}
	virtual void print(int tabdepth)
	{
		printf("[]");
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_expression_emptylist(position);
	}
};
class ast_expression_boolconst : public ast_expression
{
public:
	bool value;
	
	ast_expression_boolconst(source_position pos, bool v)
		{ position = pos; value = v; }
	virtual ~ast_expression_boolconst() {}
	virtual void print(int tabdepth)
	{
		if (value)
			printf("True");
		else
			printf("False");
		
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_expression_boolconst(position, value);
	}
};
@

Which only leaves us the direct creation of a tuple (there is no such thing for a list, as that goes via colon operators).

<<tuple expression ast>>=
class ast_expression_pair : public ast_expression
{
public:
	ast_expression *first, *second;
	
	ast_expression_pair(source_position pos, ast_expression *f, 
		ast_expression *s) 
		{position = pos; first = f; second = s;}
	virtual ~ast_expression_pair() {delete first; delete second;}
	virtual void print(int tabdepth)
	{
		printf("("); 
		first->print(tabdepth); 
		printf(","); 
		second->print(tabdepth); 
		printf(")");
		
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_expression_pair(position,
			(ast_expression*)first->copy(),
			(ast_expression*)second->copy());
	}
};
@

Putting it all together, with a base class specifically for expressions:
<<expression ast>>=
<<operator types>>
<<operator to string header>>
class ast_expression : public ast_base
{
public:
	ast_type *type;
	ast_expression() { type = NULL; }
	virtual ~ast_expression() { if (type != NULL) delete type; }
};
<<operator ast>>
<<variable read ast>>
<<funcall expression ast>>
<<constant expression ast>>
<<tuple expression ast>>
@

\section{Statement ast}
For assignment statements we need a concept of lvalue.
<<lvalue ast>>=
class ast_lvalue : public ast_base
{
public:
	ast_type *type;
	ast_lvalue() { type = NULL; }
	virtual ~ast_lvalue() { if (type != NULL) delete type; }
};
class ast_lvalue_variable : public ast_lvalue
{
public:
	std::string variable;
	ast_statement_vardecl *declaration=NULL; //Reference only, no ownership
	ast_funarg *funargdecl = NULL; //Reference only, no ownership
	
	ast_lvalue_variable(source_position pos, std::string var) 
		{ position = pos, variable = var; }
	virtual ~ast_lvalue_variable() {}
	virtual void print(int tabdepth)
	{
		printf("%s", variable.c_str());
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_lvalue_variable(position, variable);
	}
};
class ast_lvalue_field : public ast_lvalue
{
public:
	ast_lvalue *base;
	std::string field;
	
	ast_lvalue_field(ast_lvalue *b, std::string f) 
		{ position = b->position; base = b; field  = f;}
	virtual ~ast_lvalue_field() { delete base; }
	virtual void print(int tabdepth)
	{
		base->print(tabdepth);
		printf(".%s", field.c_str());
		if (type != NULL)
		{
			printf("/*");
			type->print(tabdepth);
			printf("*/");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_lvalue_field((ast_lvalue*)base->copy(), field);
	}
			
};
@

And of course we need to be able to store statements
<<statement ast>>=
class ast_statement : public ast_base
{
};
class ast_statement_block : public ast_statement
{
public:
	std::vector<ast_statement*> body;
	
	ast_statement_block(source_position pos, std::vector<ast_statement*> b)
		{ position = pos; body = b; }
	virtual ~ast_statement_block() {for (auto ptr :body) delete ptr;}
	virtual void print(int tabdepth)
	{
		printf("{\n");
		for (auto ptr:body)
		{
			for (int i=0; i<tabdepth+1; i++)
				printf("\t");
			ptr->print(tabdepth+1);
		}
		for (int i=0; i<tabdepth; i++)
			printf("\t");
		printf("}\n");
	}
	virtual ast_base *copy()
	{
		std::vector<ast_statement*> bodycopy;
		for (auto ptr : body) bodycopy.push_back(
			(ast_statement*)ptr->copy());
		
		return new ast_statement_block(position, bodycopy);
	}
};
class ast_statement_vardecl : public ast_statement
{
public:
	ast_type *type;
	std::string id;
	ast_expression *value;
	
	//Information used during IR generation
	int value_temp=-1, type_temp=-1;
	bool generate_typetemp=false;
	
	ast_statement_vardecl(ast_type *t, std::string i, ast_expression *val)
		{ position = t->position; type = t; id = i; value = val; }
	virtual ~ast_statement_vardecl() { delete type; delete value; }
	virtual void print(int tabdepth)
	{
		type->print(tabdepth);
		printf(" %s = ", id.c_str());
		value->print(tabdepth);
		printf(";\n");
	}
	virtual ast_base *copy()
	{
		return new ast_statement_vardecl((ast_type*)type->copy(),
			id, (ast_expression*)value->copy());
	}
};
class ast_statement_assign : public ast_statement
{
public:
	ast_lvalue *location;
	ast_expression *value;
	
	ast_statement_assign(ast_lvalue * loc, ast_expression *val)
		{ position = loc->position; location = loc; value = val; }
	virtual ~ast_statement_assign() { delete location; delete value;}
	virtual void print(int tabdepth)
	{
		location->print(tabdepth);
		printf(" = ");
		value->print(tabdepth);
		printf(";\n");
	}
	virtual ast_base *copy()
	{
		return new ast_statement_assign((ast_lvalue*)location->copy(),
			(ast_expression*)value->copy());
	}
};
class ast_statement_expression : public ast_statement
{
public:
	ast_expression *inner;
	
	ast_statement_expression(ast_expression *i) 
		{ position = i->position; inner = i; }
	virtual ~ast_statement_expression() { delete inner; }
	virtual void print(int tabdepth)
	{
		inner->print(tabdepth);
		printf(";\n");
	}
	virtual ast_base *copy()
	{
		return new ast_statement_expression((ast_expression*)inner->copy());
	}
};
class ast_statement_if : public ast_statement
{
public:
	ast_expression *condition;
	ast_statement *true_statement;
	ast_statement *false_statement;
	
	ast_statement_if(source_position pos, ast_expression *cond,
		ast_statement *t, ast_statement *f=NULL) 
	{
		position = pos;
		condition = cond;
		true_statement = t;
		false_statement = f;
	}
	virtual ~ast_statement_if () {
		delete condition;
		delete true_statement; 
		if (false_statement != NULL) delete false_statement;
	}
	virtual void print(int tabdepth)
	{
		printf("if (");
		condition->print(tabdepth);
		printf(") ");
		if (typeid(*true_statement) != typeid(ast_statement_block))
		{
			printf("{\n");
			for (int i=0; i<tabdepth+1; i++)
				printf("\t");
			true_statement->print(tabdepth+1);
			for (int i=0; i<tabdepth; i++)
				printf("\t");
			printf("}\n");
		}
		else
		{
			true_statement->print(tabdepth);
		}
		if (false_statement != NULL)
		{
			for (int i=0; i<tabdepth; i++)
				printf("\t");
			printf("else ");
			
			if (typeid(*false_statement) != typeid(ast_statement_block))
			{
				printf("{\n");
				for (int i=0; i<tabdepth+1; i++)
					printf("\t");
				false_statement->print(tabdepth+1);
				for (int i=0; i<tabdepth; i++)
					printf("\t");
				printf("}\n");
			}
			else
			{
				false_statement->print(tabdepth);
			}
		}
	}
	virtual ast_base *copy()
	{
		return new ast_statement_if(position,
			(ast_expression*)condition->copy(),
			(ast_statement*)true_statement->copy(),
			(ast_statement*)false_statement->copy());
	}
};
class ast_statement_while : public ast_statement
{
public:
	ast_expression *condition;
	ast_statement *body;
	
	ast_statement_while (source_position pos, ast_expression *c, ast_statement *b)
		{ position = pos; condition = c; body = b;}
	virtual ~ast_statement_while() { delete condition; delete body; }
	virtual void print(int tabdepth)
	{
		printf("while (");
		condition->print(tabdepth);
		printf(") ");
		if (typeid(*body) != typeid(ast_statement_block))
		{
			printf("{\n");
			for (int i=0; i<tabdepth+1; i++)
				printf("\t");
			body->print(tabdepth+1);
			for (int i=0; i<tabdepth; i++)
				printf("\t");
			printf("}\n");
		}
		else
		{
			body->print(tabdepth);
		}
	}
	virtual ast_base *copy()
	{
		return new ast_statement_while(position,
			(ast_expression*)condition->copy(),
			(ast_statement*)body->copy());
	}
};
class ast_statement_return : public ast_statement
{
public:
	ast_expression *value;
	
	ast_statement_return(source_position pos, ast_expression *val = NULL)
		{ position = pos; value = val; }
	virtual ~ast_statement_return() { if (value != NULL) delete value; }
	virtual void print(int tabdepth)
	{
		if (value == NULL)
			printf("return;\n");
		else
		{
			printf("return ");
			value->print(tabdepth);
			printf(";\n");
		}
	}
	virtual ast_base *copy()
	{
		return new ast_statement_return(position,
			(ast_expression*)value->copy());
	}
};
@

\section{Program ast}
Representing the whole program is a single top-level object, containing two lists, variable definitions and function definitions. Variable declarations can be handled as statements, so do that (saves code later on). Functions need something new.
<<program ast>>=
class ast_funarg : public ast_base
{
public:
	ast_type *type;
	std::string name;
	
	//info for IR generation
	int value_temp = -1, type_temp = -1;
	
	ast_funarg(ast_type *t, std::string n)
		{ position = t->position; type = t; name = n; }
	virtual ~ast_funarg() { delete type; }
	virtual void print(int tabdepth)
	{
		type->print(tabdepth);
		printf(" %s", name.c_str());
	}
	virtual ast_base *copy()
	{
		return new ast_funarg((ast_type*)type->copy(), name);
	}
};
class ast_fundecl : public ast_base
{
public:
	ast_type *type;
	std::string name;
	std::vector<ast_funarg*> args;
	ast_statement *body;
	
	ast_fundecl(ast_type *t, std::string n, std::vector<ast_funarg*> a, 
	                                                   ast_statement* b) 
		{ position = t->position; type = t; name = n; args = a; body = b; }
	virtual ~ast_fundecl()
	{
		delete type;
		delete body;
		for (auto ptr : args) delete ptr;
	}
	virtual void print(int tabdepth)
	{
		type->print(tabdepth);
		printf(" %s(", name.c_str());
		bool is_firstarg = true;
		for (auto ptr : args)
		{
			if (is_firstarg)
				is_firstarg = false;
			else
				printf(",");
			ptr->print(tabdepth);
		}
		printf(") ");
		body->print(tabdepth);
	}
	virtual ast_base *copy()
	{
		std::vector<ast_funarg*> argscopy;
		for (auto ptr : args) argscopy.push_back((ast_funarg*)ptr->copy());
		
		return new ast_fundecl((ast_type*)type->copy(), name, argscopy,
			(ast_statement*)body->copy());
	}
		
};
class ast_program : public ast_base
{
public:
	std::vector<ast_statement_vardecl*> globalvars;
	std::vector<ast_fundecl*> functions;
	
	ast_program(std::vector<ast_statement_vardecl*>vars, 
	                      std::vector<ast_fundecl*> funs) 
		{ globalvars = vars; functions = funs; }
	virtual ~ast_program()
	{
		for (auto ptr : globalvars) delete ptr;
		for (auto ptr : functions) delete ptr;
	}
	virtual void print(int tabdepth)
	{
		for (auto ptr : globalvars)
		{
			ptr->print(tabdepth);
		}
		for (auto ptr : functions)
		{
			ptr->print(tabdepth);
		}
	}
	virtual ast_base *copy()
	{
		std::vector<ast_statement_vardecl*> globcopy;
		for (auto ptr : globalvars)
			globcopy.push_back((ast_statement_vardecl*)ptr->copy());
		std::vector<ast_fundecl*> funcopy;
		for (auto ptr : functions)
			funcopy.push_back((ast_fundecl*)ptr->copy());
		return new ast_program(globcopy, funcopy);
	}
};
@

\section{Source and headers}
<<ast.h>>=
#ifndef AST_H
#define AST_H
#include "position.h"
#include <cstdio>
#include <string>
#include <vector>
#include <typeinfo>

<<ast base>>
class ast_statement_vardecl;
class ast_funarg;
<<type expression ast>>
<<expression ast>>
<<lvalue ast>>
<<statement ast>>
<<program ast>>
#endif
@
<<ast.cpp>>=
#include "ast.h"
using namespace std;

<<expression ast operator to string>>
@



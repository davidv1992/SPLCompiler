\chapter{Parsing}

With the issue of recognizing the individual tokens out of the way, we can turn to the actual problem of parsing the input. The choice was made to build a hand-written recursive descent parser. A recursive descent parser is one of the easiest ways of writing a parser without some form of parser-generating tooling, and allows both descent error messages and some form of error recovery in the parser itself.

Recursive descent has a few drawbacks, such as some dificulties with left recursion. Luckily, the occurences of this in the SPL language are of such a nature that they can be easily handled by parsing them as left-recursive constructs whilst using an accumulator to change the resulting parse tree to representing right recursion.

The parser itself is subdivided into three major parts, each representing a part of the SPL language. These are presented in sequence, followed by the glue that enables us to parse entire programs.

The first major segment of the parser is the type parser. This segment of the language has no ambiguities or other problems, which is reflected in the simplicity of this parser.

This is followed by the brunt of the parser, the expression parser. This handles the parsing of everything that produces a value as end result. This part is responsible for dealing with operator precedence, association and related problems. Consequently, allmost all of the occurences of left recursion in the language are in this part of the parser, and handled as mentioned above.

The final major segment is the statement parsing. It is responsible for parsing function bodies, and handles everything from blocks to assigns to return statements. It also handles the parsing of left-hand sides of assignments, and it deals with variable declarations and the problems arising in handling these.

The glue contains the code that detects whether the current top-level declaration is that of a function, or whether it represents a variable. It has the issue that it can only make this distinction fairly late in the process of parsing the declaration, but since the first two nonterminals of both are completely identical, this turns out to be fairly straightforward to deal with.

\section{Grammar}
The grammar as given in the SPL specification has a number of ambiguities, which need to be resolved before we can get to work on the parser proper. The most important of these is the fact that expression parsing is defined using operator precedence. However, for the purpose of parsing it is more usefull to write it in the grammar itself. For this purpose we introduce several new non-terminals opl0 through opl6, which contain the precedence levels.

Also, we need some way to deal with left associative operators. This is done by translating the underlying grammar to a right-recursive one, and then fixing this in the generation of the abstract syntax tree.

On the grammar level, the final issue is that of dangling elses, this is simply resolved by always associating the else with the closest if (leftmost derivation).

Furthermore, we have several extensions that can be enabled, and these are easiest to implement by just parsing as if they are on, and adding extra checks that execute during the parsing that limit the allowed parsetrees when the extensions are off.

This gives us the following grammar as used in implementing the parser. There is roughly a one-to-one mapping between the functions used below and the grammar constructs.

\begin{longtable}{lcl}
\nonterm{Program}&=&\nonterm{Type} \uterm{id} \term{(} [\nonterm{Funarg} (\term{,} \nonterm{Funarg})*] \term{)} \term{\{} \nonterm{Statement}+ \term{\}}\\*
&\bor& \nonterm{Type} \uterm{id} \term{=} \nonterm{Expression} \term{;}\\
\nonterm{Funarg}&=&\nonterm{Type} \uterm{id}\\
\nonterm{Statement} &=& \term{\{} \nonterm{Statement} \term{\}}\\*
&\bor& \nonterm{Lvalue} \term{=} \nonterm{Expression} \term{;}\\*
&\bor& \uterm{id} \term{(} [\nonterm{Expression} (\term{,} \nonterm{Expression})*] \term{)} \term{;}\\*
&\bor& \nonterm{Type} \uterm{id} \term{=} \nonterm{Expression} \term{;}\\*
&\bor& \term{if} \term{(} \nonterm{Expression} \term{)} \nonterm{Statement} [\term{else} \nonterm{Statement}]\\*
&\bor& \term{while} \term{(} \nonterm{Expression} \term{)} \nonterm{Statement}\\*
&\bor& \term{return} [\nonterm{Expression}] \term{;}\\
\nonterm{Lvalue}&=&\uterm{id} (\term{.} \uterm{id})*\\
\nonterm{Type}&\bor&\uterm{id}\\*
&\bor&\term{[} \nonterm{Type} \term{]}\\*
&\bor&\term{(} \nonterm{Type} \term{,} \nonterm{Type} \term{)}\\
\nonterm{Expression}&=&\nonterm{opl6} ( \term{:} \nonterm{opl6} )*\\
\nonterm{opl6}&=&\nonterm{opl5} ( \term{\bor\bor} \nonterm{opl5} )*\\
\nonterm{opl5}&=&\nonterm{opl4} ( \term{\&\&} \nonterm{opl4} )*\\
\nonterm{opl4}&=&\nonterm{opl3} ( ( \term{==} \bor\ \term{!=} ) \nonterm{opl3} )*\\
\nonterm{opl3}&=&\nonterm{opl2} ( ( \term{\textless} \bor\ \term{\textless =} \bor\ \term{\textgreater} \bor\ \term{\textgreater =} ) \nonterm{opl2} )*\\
\nonterm{opl2}&=&\nonterm{opl1} ( ( \term{+} \bor\ \term{-} ) \nonterm{opl1} )*\\
\nonterm{opl1}&=&\nonterm{opl0} ( ( \term{*} \bor\ \term{/} \bor\ \term{\%} ) \nonterm{opl0} )*\\
\nonterm{opl0}&=&\term{(} \nonterm{Expression} \term{)}\\*
&\bor&\term{(} \nonterm{Expression} \term{,} \nonterm{Expression} \term{)}\\*
&\bor&\uterm{id} \term{(} [ \nonterm{Expression} ( \term{,} \nonterm{Expression} )* ] \term{)}\\*
&\bor&\uterm{id} ( \term{.} \uterm{id} )*\\*
&\bor&\term{-} \nonterm{opl0}\\*
&\bor&\term{!} \nonterm{opl0}\\*
&\bor&\uterm{int} \bor\ \uterm{char} \bor\ \term{[]}\\
\end{longtable}

\section{Abstract Syntax trees}
Abstract syntax trees are implemented using classes for each of the nodes. Each node is responsible for managing the memory used by itself and its subtrees. Upon passing pointers of an ast to a constructor for a node, that node acquires ownership of the memory associated with the ast, and should free it when it gets deleted. Also, each node is able to print a human-readable representation of itsef.

<<ast base>>=
class ast_base
{
public:
	source_position position;

	virtual ~ast_base(){};
	virtual void print(int tabdepth)=0;
};
@

\section{Parsing types}
Type expressions are simple, there are no issues with precedence and ambiguities that require extra rules to resolve, so we can just implement the given rules.

<<type parsing header>>=
ast_type *parse_type();
@
<<type expression ast>>=
class ast_type : public ast_base
{
};
class ast_simple_type : public ast_type
{
public:
	std::string type_id;

	ast_simple_type(source_position pos, std::string _id) 
		{ position = pos; type_id=_id; }
	virtual ~ast_simple_type() {}
	virtual void print(int tabdepth) {printf("%s", type_id.c_str());}
};
class ast_tuple_type : public ast_type
{
public:
	ast_type *type_first, *type_second;

	ast_tuple_type(source_position pos, ast_type *first, ast_type *second)
	{
		position = pos;
		type_first = first; 
		type_second = second;
	}
	virtual ~ast_tuple_type() 
	{
		delete type_first; 
		delete type_second;
	}
	virtual void print(int tabdepth)
	{
		printf("(");
		type_first->print(tabdepth);
		printf(",");
		type_second->print(tabdepth);
		printf(")");
	}
};
class ast_list_type : public ast_type
{
public:
	ast_type *type_element;

	ast_list_type(source_position pos, ast_type *el) 
		{ position = pos; type_element = el; }
	virtual ~ast_list_type() { delete type_element; }
	virtual void print(int tabdepth)
	{
		printf("[");
		type_element->print(tabdepth);
		printf("]");
	}
};
@
<<parse simple type>>=
case TOKEN_ID:
	return new ast_simple_type(cur_token.position, cur_token.id);
@
<<parse tuple type>>=
case TOKEN_ROUNDBRACKET_LEFT:
	{
		ast_type *first = parse_type();
		match_token(TOKEN_COMMA);
		ast_type *right = parse_type();
		match_token(TOKEN_ROUNDBRACKET_RIGHT);
		return new ast_tuple_type(cur_token.position, first, right);
	}
@
<<parse list type>>=
case TOKEN_SQUAREBRACKET_LEFT:
	{
		ast_type *el = parse_type();
		match_token(TOKEN_SQUAREBRACKET_RIGHT);
		return new ast_list_type(cur_token.position, el);
	}
@
<<parse type expression>>=
ast_type *parse_type()
{
	token cur_token = tok_get();
	switch(cur_token.type)
	{
	<<parse simple type>>
	<<parse tuple type>>
	<<parse list type>>
	default:
		parse_error(cur_token.position, 
			"Expected type, got %s", token_name(cur_token).c_str());
		return new ast_simple_type(cur_token.position, "Int");
	}
}
@

\section{Parsing expressions}
Expressions are the most complicated part of the grammar, because of the extra non-terminals introduced to insure good handling of operator precedence. As stated before, the extra tokens are named after the precedence level they represent.

\subsection{Expression ast}
The ast representing all this however is straightforward, one node type for binary operators and one for unary:
<<expression ast>>=
enum ast_binary_operator {
	OP_ADD,
	OP_SUB,
	OP_MUL,
	OP_DIV,
	OP_MOD,
	
	OP_AND,
	OP_OR,
	
	OP_EQ,
	OP_NE,
	OP_LT,
	OP_GT,
	OP_LE,
	OP_GE,
	
	OP_COLON,
};
enum ast_unary_operator{
	OP_NEG,
	OP_NOT,
};
std::string ast_operator_string(ast_binary_operator op);
std::string ast_operator_string(ast_unary_operator op);
class ast_expression : public ast_base
{
};
class ast_expression_binary : public ast_expression
{
public:
	ast_expression *left, *right;
	ast_binary_operator op;
	
	ast_expression_binary(source_position pos, ast_binary_operator _op, 
		ast_expression *l, ast_expression *r) 
		{ position = pos, op =_op; left = l; right = r; }
	virtual ~ast_expression_binary() { delete left; delete right; }
	virtual void print(int tabdepth) {
		printf("(");
		left->print(tabdepth);
		printf("%s", ast_operator_string(op).c_str());
		right->print(tabdepth);
		printf(")");
	}
};
class ast_expression_unary : public ast_expression
{
public:
	ast_expression *inner;
	ast_unary_operator op;
	
	ast_expression_unary(source_position pos, ast_unary_operator _op, 
		ast_expression *i) 
		{ position = pos; op = _op; inner = i;}
	virtual ~ast_expression_unary() {delete inner;}
	virtual void print(int tabdepth) {
		printf("(%s", ast_operator_string(op).c_str());
		inner->print(tabdepth);
		printf(")");
	}
};
class ast_expression_variable : public ast_expression
{
};
class ast_expression_variable_base : public ast_expression_variable
{
public:
	std::string id;
	
	ast_expression_variable_base(source_position pos, std::string _id) 
		{ position = pos; id = _id;}
	virtual ~ast_expression_variable_base(){}
	virtual void print(int tabdepth) { printf("%s", id.c_str()); }
};
class ast_expression_variable_field : public ast_expression_variable
{
public:
	ast_expression_variable *base;
	std::string field;
	
	ast_expression_variable_field(ast_expression_variable *b, std::string f) 
		{ position = b->position; base = b; field = f; }
	virtual ~ast_expression_variable_field() { delete base; }
	virtual void print(int tabdepth)
	{ 
		base->print(tabdepth);
		printf(".%s", field.c_str());
	}
};
class ast_expression_funcall : public ast_expression
{
public:
	std::string id;
	std::vector<ast_expression*> arguments;
	
	ast_expression_funcall(source_position pos, 
		std::string fn, std::vector<ast_expression*> args) 
		{ position = pos; id=fn; arguments = args; }
	virtual ~ast_expression_funcall() { for (auto ptr : arguments) delete ptr; }
	virtual void print(int tabdepth) {
		bool firstArg = true;
		printf("%s(", id.c_str());
		for (auto ptr : arguments)
		{
			if (firstArg)
				firstArg = false;
			else
				printf(", ");
			ptr->print(tabdepth);
		}
		printf(")");
	}
};
class ast_expression_intconst : public ast_expression
{
public:
	unsigned int value;
	
	ast_expression_intconst(source_position pos, unsigned int v) 
		{position = pos, value = v;}
	virtual ~ast_expression_intconst() {}
	virtual void print(int tabdepth) { printf("%d", value); }
};
class ast_expression_charconst : public ast_expression
{
public:
	char value;
	
	ast_expression_charconst(source_position pos, char v) 
		{ position = pos; value = v; }
	virtual ~ast_expression_charconst() {}
	virtual void print(int tabdepth) { printf("'%c'", value); }
};
class ast_expression_emptylist : public ast_expression
{
public:
	ast_expression_emptylist(source_position pos)
		{position = pos;}
	virtual ~ast_expression_emptylist(){}
	virtual void print(int tabdepth) { printf("[]");}
};
class ast_expression_pair : public ast_expression
{
public:
	ast_expression *first, *second;
	
	ast_expression_pair(source_position pos, ast_expression *f, 
		ast_expression *s) 
		{position = pos; first = f; second = s;}
	virtual ~ast_expression_pair() {delete first; delete second;}
	virtual void print(int tabdepth)
	{
		printf("("); 
		first->print(tabdepth); 
		printf(","); 
		second->print(tabdepth); 
		printf(")");
	}
};
@
<<expression ast implementation>>=
string ast_operator_string(ast_binary_operator op)
{
	switch(op)
	{
	case OP_ADD:
		return "+";
	case OP_SUB:
		return "-";
	case OP_MUL:
		return "*";
	case OP_DIV:
		return "/";
	case OP_MOD:
		return "%";
	
	case OP_AND:
		return "&&";
	case OP_OR:
		return "||";
	
	case OP_EQ:
		return "==";
	case OP_NE:
		return "!=";
	case OP_LT:
		return "<";
	case OP_GT:
		return ">";
	case OP_LE:
		return "<=";
	case OP_GE:
		return ">=";
	
	case OP_COLON:
		return ":";
	}
	
	return "";
}

string ast_operator_string(ast_unary_operator op)
{
	switch(op)
	{
	case OP_NEG:
		return "-";
	case OP_NOT:
		return "!";
	}
	
	return "";
}
@

\subsection{Parsing expression header}
Since expressions can contain brackets, we need recursion across multiple functions, hence we pre-declare the expr parser:
<<parse expression header>>=
ast_expression *parse_expression();
@

\subsection{opl0}
Highest precedence, brackets, constants, variables, function calls and unary operators. Because there is actually quite a lot happening here, split it up in more than one piece.
<<parse opl0>>=
ast_expression *parse_opl0()
{
	token cur_token = tok_get();
	
	token next_token;
	switch(cur_token.type)
	{
	<<parse bracketed expressions>>
	<<parse unary operators>>
	<<parse identifier expressions>>
	<<parse constants>>
	default:
		parse_error(cur_token.position, 
			"Unexpected token %s", token_name(cur_token).c_str());
		return new ast_expression_intconst(cur_token.position, 0);
	}
}
@

There are two things a pair of brackets "()" can mean. Either it groups stuff up to change order of evaluation, or it makes a pair. To recognize the pair case, just check for a comma after the first expression in the brackets.
<<parse bracketed expressions>>=
case TOKEN_ROUNDBRACKET_LEFT: {
	ast_expression *result = parse_expression();
	next_token = tok_get();
	if (next_token.type == TOKEN_ROUNDBRACKET_RIGHT)
	{
		return result;
	}
	else if (next_token.type == TOKEN_COMMA)
	{
		ast_expression *sec = parse_expression();
		match_token(TOKEN_ROUNDBRACKET_RIGHT);
		return new ast_expression_pair(cur_token.position, result, sec);
	}
	else
	{
		parse_error(next_token.position, 
			"Unexpected %s, expected , or )", token_name(next_token).c_str());
		return result;
	}
}
@

An identifier can signal two things. It either means we have a function call (when it is followed by a "(")), or it can be a variable access.
<<parse identifier expressions>>=
case TOKEN_ID:
	next_token = tok_get();
	if (next_token.type == TOKEN_ROUNDBRACKET_LEFT)
	{
		<<parse function call expression>>
	}
	else
	{
		<<parse variable>>
	}
@

A function call is relatively straightforward. We check whether we have had all arguments by checking whether the last one was followed by a comma. This does mean we make function calls with no argument a special case, hence the extra if.
<<parse function call expression>>=
vector<ast_expression*> args;
next_token = tok_get();
if (next_token.type != TOKEN_ROUNDBRACKET_RIGHT)
{
	tok_unget(next_token);
	do
	{
		args.push_back(parse_expression());
		next_token = tok_get();
	}
	while (next_token.type == TOKEN_COMMA);
}

if (next_token.type != TOKEN_ROUNDBRACKET_RIGHT)
{
	parse_error(next_token.position, "Missing )");
	tok_unget(next_token);
}

return new ast_expression_funcall(cur_token.position, cur_token.id, args);
@

Variable references are a bit more difficult, because field access has a right-recursive structure. This is fixed by ussing an accumulator and a loop, and parsing it in a more bottom-up style (the same way as other operators with this behaviour are parsed).
<<parse variable>>=
ast_expression_variable *val = new ast_expression_variable_base
	(cur_token.position, cur_token.id);
while (next_token.type == TOKEN_DOT)
{
	next_token = tok_get();
	string field = "<missing>";
	if (next_token.type == TOKEN_ID)
	{
		field = next_token.id;
	}
	else
	{
		parse_error(next_token.position, 
			"Missing field name, got %s", token_name(next_token).c_str());
		tok_unget(next_token);
	}
	val = new ast_expression_variable_field(val, field);
	next_token = tok_get();
}
tok_unget(next_token);
return val;
@

The unary operators are really straightforward:
<<parse unary operators>>=
case TOKEN_MINUS:
	return new ast_expression_unary(cur_token.position, OP_NEG, parse_opl0());
case TOKEN_NOT:
	return new ast_expression_unary(cur_token.position, OP_NOT, parse_opl0());
@

And constants are straightforward as well
<<parse constants>>=
case TOKEN_NUMERIC:
	return new ast_expression_intconst(cur_token.position, cur_token.intval);
case TOKEN_CHARACTER:
	return new ast_expression_charconst(cur_token.position, cur_token.charval);
case TOKEN_SQUAREBRACKET_LEFT:
	match_token(TOKEN_SQUAREBRACKET_RIGHT);
	return new ast_expression_emptylist(cur_token.position);

@

\subsection{opl1}
Second highest precedence, division, multiplication and modulo
<<parse opl1>>=
ast_expression *parse_opl1()
{
	ast_expression *opl0 = parse_opl0();
	
	bool cont = true;
	
	while (cont)
	{
		token cur_token = tok_get();
	
		switch(cur_token.type)
		{
		case TOKEN_TIMES:
			opl0 = new ast_expression_binary(cur_token.position, OP_MUL, 
				opl0, parse_opl0());
			break;
		case TOKEN_DIV:
			opl0 = new ast_expression_binary(cur_token.position, OP_DIV,
				opl0, parse_opl0());
			break;
		case TOKEN_MOD:
			opl0 = new ast_expression_binary(cur_token.position, OP_MOD,
				opl0, parse_opl0());
			break;
		default:
			// no further stuff at this level
			tok_unget(cur_token);
			cont = false;
			break;
		}
	}
	
	return opl0;
}
@

\subsection{opl2}
Third highest precedence, plus and minus
<<parse opl2>>=
ast_expression *parse_opl2()
{
	ast_expression *opl1 = parse_opl1();
	
	bool cont = true;
	
	while (cont)
	{
		token cur_token = tok_get();
		
		switch(cur_token.type)
		{
		case TOKEN_PLUS:
			opl1 = new ast_expression_binary(cur_token.position, OP_ADD,
				opl1, parse_opl1());
			break;
		case TOKEN_MINUS:
			opl1 = new ast_expression_binary(cur_token.position, OP_SUB,
				opl1, parse_opl1());
			break;
		default:
			// no furhter stuff at this level
			tok_unget(cur_token);
			cont = false;
			break;
		}
	}
	
	return opl1;
}
@

\subsection{opl3}
Next up are ordering operators
<<parse opl3>>=
ast_expression *parse_opl3()
{
	ast_expression *opl2 = parse_opl2();
	
	bool cont = true;
	
	while (cont)
	{
		token cur_token = tok_get();
		
		switch(cur_token.type)
		{
		case TOKEN_LT:
			opl2 = new ast_expression_binary(cur_token.position, OP_LT, 
				opl2, parse_opl2());
			break;
		case TOKEN_LE:
			opl2 = new ast_expression_binary(cur_token.position, OP_LE,
				opl2, parse_opl2());
			break;
		case TOKEN_GT:
			opl2 = new ast_expression_binary(cur_token.position, OP_GT,
				opl2, parse_opl2());
			break;
		case TOKEN_GE:
			opl2 = new ast_expression_binary(cur_token.position, OP_GE,
				opl2, parse_opl2());
			break;
		default:
			// no further stuff at this level
			tok_unget(cur_token);
			cont = false;
			break;
		}
	}
	
	return opl2;
}	
@

\subsection{opl4}
Next up equality and its inverse
<<parse opl4>>=
ast_expression *parse_opl4()
{
	ast_expression *opl3 = parse_opl3();
	
	bool cont = true;
	
	while (cont)
	{
		token cur_token = tok_get();
		
		switch(cur_token.type)
		{
		case TOKEN_EQ:
			opl3 = new ast_expression_binary(cur_token.position, OP_EQ,
				opl3, parse_opl3());
			break;
		case TOKEN_NE:
			opl3 = new ast_expression_binary(cur_token.position, OP_NE,
				opl3, parse_opl3());
			break;
		default:
			// not further stuff at this level
			tok_unget(cur_token);
			cont = false;
			break;
		}
	}
	
	return opl3;
}
@

\subsection{opl5}
Logical and
<<parse opl5>>=
ast_expression *parse_opl5()
{
	ast_expression *opl4 = parse_opl4();
	
	bool cont = true;
	
	while (cont)
	{
		token cur_token = tok_get();
		
		switch(cur_token.type)
		{
		case TOKEN_AND:
			opl4 = new ast_expression_binary(cur_token.position, OP_AND,
				opl4, parse_opl4());
			break;
		default:
			// no further stuff at this level
			tok_unget(cur_token);
			cont = false;
			break;
		}
	}
	
	return opl4;
}
@

\subsection{opl6}
Logical or
<<parse opl6>>=
ast_expression *parse_opl6()
{
	ast_expression *opl5 = parse_opl5();
	
	bool cont = true;
	
	while (cont)
	{
		token cur_token = tok_get();
		
		switch(cur_token.type)
		{
		case TOKEN_OR:
			opl5 = new ast_expression_binary(cur_token.position, OP_OR,
				opl5, parse_opl5());
			break;
		default:
			// no further stuff at this level
			tok_unget(cur_token);
			cont = false;
			break;
		}
	}
	
	return opl5;
}
@

\subsection{Toplevel expression parsing}
And were at the highest precedence level (hence using parse\_expr), the colon operator:
<<parse expression>>=
ast_expression *parse_expression()
{
	ast_expression *opl6 = parse_opl6();
	
	token cur_token = tok_get();
	
	if (cur_token.type == TOKEN_COLON)
	{
		return new ast_expression_binary(cur_token.position, OP_COLON, 
			opl6, parse_expression());
	}
	else
	{
		tok_unget(cur_token);
		return opl6;
	}
}
@

\section{Parsing statements}
Statements are relatively simple. There are only two notable things. In order to avoid having two representations of function calls, a function call statement is represented as an expression statement where the expression is a function call. Furthermore, because it is very easy to implement, variable declarations are seen as statements inside functions, using a flag and boolean argument to the parsing routines to enforce the strict rules.

\subsection{Statement ast}
For assignment statements we need a concept of lvalue.
<<lvalue ast>>=
class ast_lvalue : public ast_base
{
};
class ast_lvalue_variable : public ast_lvalue
{
public:
	std::string variable;
	
	ast_lvalue_variable(source_position pos, std::string var) 
		{ position = pos, variable = var; }
	virtual ~ast_lvalue_variable() {}
	virtual void print(int tabdepth)
	{
		printf("%s", variable.c_str());
	}
};
class ast_lvalue_field : public ast_lvalue
{
public:
	ast_lvalue *base;
	std::string field;
	
	ast_lvalue_field(ast_lvalue *b, std::string f) 
		{ position = b->position; base = b; field  = f;}
	virtual ~ast_lvalue_field() { delete base; }
	virtual void print(int tabdepth)
	{
		base->print(tabdepth);
		printf(".%s", field.c_str());
	}
};
@

And of course we need to be able to store statements
<<statement ast>>=
class ast_statement : public ast_base
{
};
class ast_statement_block : public ast_statement
{
public:
	std::vector<ast_statement*> body;
	
	ast_statement_block(source_position pos, std::vector<ast_statement*> b)
		{ position = pos; body = b; }
	virtual ~ast_statement_block() {for (auto ptr :body) delete ptr;}
	virtual void print(int tabdepth)
	{
		printf("{\n");
		for (auto ptr:body)
		{
			for (int i=0; i<tabdepth+1; i++)
				printf("\t");
			ptr->print(tabdepth+1);
		}
		for (int i=0; i<tabdepth; i++)
			printf("\t");
		printf("}\n");
	}
};
class ast_statement_vardecl : public ast_statement
{
public:
	ast_type *type;
	std::string id;
	ast_expression *value;
	
	ast_statement_vardecl(ast_type *t, std::string i, ast_expression *val)
		{ position = t->position; type = t; id = i; value = val; }
	virtual ~ast_statement_vardecl() { delete type; delete value; }
	virtual void print(int tabdepth)
	{
		type->print(tabdepth);
		printf(" %s = ", id.c_str());
		value->print(tabdepth);
		printf(";\n");
	}
};
class ast_statement_assign : public ast_statement
{
public:
	ast_lvalue *location;
	ast_expression *value;
	
	ast_statement_assign(ast_lvalue * loc, ast_expression *val)
		{ position = loc->position; location = loc; value = val; }
	virtual ~ast_statement_assign() { delete location; delete value;}
	virtual void print(int tabdepth)
	{
		location->print(tabdepth);
		printf(" = ");
		value->print(tabdepth);
		printf(";\n");
	}
};
class ast_statement_expression : public ast_statement
{
public:
	ast_expression *inner;
	
	ast_statement_expression(ast_expression *i) 
		{ position = i->position; inner = i; }
	virtual ~ast_statement_expression() { delete inner; }
	virtual void print(int tabdepth)
	{
		inner->print(tabdepth);
		printf(";\n");
	}
};
class ast_statement_if : public ast_statement
{
public:
	ast_expression *condition;
	ast_statement *true_statement;
	ast_statement *false_statement;
	
	ast_statement_if(source_position pos, ast_expression *cond,
		ast_statement *t, ast_statement *f=NULL) 
	{
		position = pos;
		condition = cond;
		true_statement = t;
		false_statement = f;
	}
	virtual ~ast_statement_if () {
		delete true_statement; 
		if (false_statement != NULL) delete false_statement;
	}
	virtual void print(int tabdepth)
	{
		printf("if (");
		condition->print(tabdepth);
		printf(") ");
		if (typeid(*true_statement) != typeid(ast_statement_block))
		{
			printf("{\n");
			for (int i=0; i<tabdepth+1; i++)
				printf("\t");
			true_statement->print(tabdepth+1);
			for (int i=0; i<tabdepth; i++)
				printf("\t");
			printf("}\n");
		}
		else
		{
			true_statement->print(tabdepth);
		}
		if (false_statement != NULL)
		{
			for (int i=0; i<tabdepth; i++)
				printf("\t");
			printf("else ");
			
			if (typeid(*false_statement) != typeid(ast_statement_block))
			{
				printf("{\n");
				for (int i=0; i<tabdepth+1; i++)
					printf("\t");
				false_statement->print(tabdepth+1);
				for (int i=0; i<tabdepth; i++)
					printf("\t");
				printf("}\n");
			}
			else
			{
				false_statement->print(tabdepth);
			}
		}
	}
};
class ast_statement_while : public ast_statement
{
public:
	ast_expression *condition;
	ast_statement *body;
	
	ast_statement_while (source_position pos, ast_expression *c, ast_statement *b)
		{ position = pos; condition = c; body = b;}
	virtual ~ast_statement_while() { delete condition; delete body; }
	virtual void print(int tabdepth)
	{
		printf("while (");
		condition->print(tabdepth);
		printf(") ");
		if (typeid(*body) != typeid(ast_statement_block))
		{
			printf("{\n");
			for (int i=0; i<tabdepth+1; i++)
				printf("\t");
			body->print(tabdepth+1);
			for (int i=0; i<tabdepth; i++)
				printf("\t");
			printf("}\n");
		}
		else
		{
			body->print(tabdepth);
		}
	}
};
class ast_statement_return : public ast_statement
{
public:
	ast_expression *value;
	
	ast_statement_return(source_position pos, ast_expression *val = NULL)
		{ position = pos; value = val; }
	virtual ~ast_statement_return() { if (value != NULL) delete value; }
	virtual void print(int tabdepth)
	{
		if (value == NULL)
			printf("return;\n");
		else
		{
			printf("return ");
			value->print(tabdepth);
			printf(";\n");
		}
	}
};
@

\subsection{Parsing lvalues}
Parsing lvalues is straightforward, because there really is only one thing going on. The only problem is that there is left recursion, but we solve that in the same way as for expressions.
<<parse lvalue>>=
ast_lvalue *parse_lvalue()
{
	ast_lvalue *res;
	
	token cur_token = tok_get();
	if (cur_token.type != TOKEN_ID)
	{
		// Technically an error, but the rest of the parser shouldn't call us if
		//  the next token is not an ID, hence we can afford to fatal here and 
		//  not handle this in a better way
		parse_fatal(cur_token.position, 
			"Expected lvalue, got %s (could be internal compiler error)", 
			token_name(cur_token).c_str());
	}
	
	res = new ast_lvalue_variable(cur_token.position, cur_token.id);
	
	token next_token = tok_get();
	while (next_token.type == TOKEN_DOT)
	{
		next_token = tok_get();
		string field;
		if (cur_token.type != TOKEN_ID)
		{
			field = "<missing>";
			parse_error(next_token.position, 
				"Missing field name, got %s", token_name(next_token).c_str());
		}
		else
		{
			field = next_token.id;
			next_token = tok_get();
		}
		
		res = new ast_lvalue_field(res, field);	
	}
	tok_unget(next_token);
	
	return res;
}
@

\subsection{Parsing statements}
Parsing statements has two modes, depending on whether vardecls are allowed in strict mode. Furthermore, we keep track if the current statement is part of "if <stmt>", to give warnings for the dangling else problem.
If we cannot generate a statement starting with the current input, we declare an error and consume it. This is likely to give us a reasonable state, unless it is an eof token, which is handled seperately in a few cases.
<<parse statement header>>=
ast_statement *parse_statement(bool vardecl_allowed, bool direct_in_if);
@
<<parse statement>>=
ast_statement *parse_statement(bool vardecl_allowed, bool direct_in_if)
{
	token cur_token = tok_get();
	
	token next_token;
	switch(cur_token.type)
	{
	<<parse block>>
	<<parse statements starting with id>>
	<<parse rest of vardecls>>
	<<parse if>>
	<<parse while>>
	<<parse return>>
	default:
		parse_error(cur_token.position, 
			"Unexpected symbol %s, expected a statement.", 
			token_name(cur_token).c_str());
		return new ast_statement_block(cur_token.position, 
			vector<ast_statement*>(0));
	}
	
	return new ast_statement_block(cur_token.position, 
		vector<ast_statement*>(0));
}
@

\subsection{Assignments, function calls and variable declarations}
Id first has a few options, either it is a vardecl with simple type, a function call, or an assign, so we need extra lookahead
<<parse statements starting with id>>=
case TOKEN_ID:
	next_token = tok_get();
	if (next_token.type == TOKEN_ASSIGN || next_token.type == TOKEN_DOT)
	{
		tok_unget(next_token);
		tok_unget(cur_token);
		<<parse assign>>
	}
	else if (next_token.type == TOKEN_ROUNDBRACKET_LEFT)
	{
		<<parse funcall>>
	}
	else
	{
		tok_unget(next_token);
		tok_unget(cur_token);
		<<parse vardecl>>
	}
	break;
@

function call statements are actually more like expressions, so the rest of the compiler looks at function call statements as expressions that are a statement on their own.
<<parse funcall>>=
vector<ast_expression*> args;
next_token = tok_get();
if (next_token.type != TOKEN_ROUNDBRACKET_RIGHT)
{
	tok_unget(next_token);
	do
	{
		args.push_back(parse_expression());
		next_token = tok_get();
	}
	while (next_token.type == TOKEN_COMMA);
}

if (next_token.type != TOKEN_ROUNDBRACKET_RIGHT)
{
	parse_error(next_token.position, "Missing )");
	tok_unget(next_token);
}

match_token(TOKEN_SEMICOLON);

return new ast_statement_expression(new ast_expression_funcall(cur_token.position, 
	cur_token.id, args));
@

Variable declarations have two source:
<<parse rest of vardecls>>=
case TOKEN_ROUNDBRACKET_LEFT:
case TOKEN_SQUAREBRACKET_LEFT:
	tok_unget(cur_token);
	<<parse vardecl>>
	break;
@
<<parse vardecl>>=
{
	// cur_token still contains info on first token of statement, lets use that here
	if (!vardecl_allowed && strict_vardecl)
		parse_error(cur_token.position, "Illegal variable declaration. "
			"Variable declarations are only allowed at start of functions.");
		
	ast_type *type = parse_type();
	cur_token = tok_get();
	string name;
	if (cur_token.type != TOKEN_ID)
	{
		parse_error(cur_token.position, "Missing variable name.");
		tok_unget(cur_token);
		name = "<missing>";
	}
	else
	{
		name = cur_token.id;
	}
	match_token(TOKEN_ASSIGN);
	ast_expression *value = parse_expression();
	match_token(TOKEN_SEMICOLON);
	return new ast_statement_vardecl(type, name, value);
}
@

Assignments come only from ids, hence we dont need seperate case statement:
<<parse assign>>=
{
	ast_lvalue *lhs = parse_lvalue();
	match_token(TOKEN_ASSIGN);
	ast_expression *value = parse_expression();
	match_token(TOKEN_SEMICOLON);
	return new ast_statement_assign(lhs, value);
}
@

\subsection{if statements}
For an else the corresponding if might be ambigue. We always bind to the last started if that we can still bind it to (eg if if stmt; else stmt; is parsed as if {if stmt; else stmt;}).
<<parse if>>=
case TOKEN_IF:
{
	match_token(TOKEN_ROUNDBRACKET_LEFT);
	ast_expression *cond = parse_expression();
	match_token(TOKEN_ROUNDBRACKET_RIGHT);
	ast_statement *truestat = parse_statement(false, true);
	next_token = tok_get();
	if (next_token.type == TOKEN_ELSE)
	{
		if (direct_in_if)
			parse_warning(next_token.position, 
				"Ambiguos else, can correspond to more than one if.");
		return new ast_statement_if(cur_token.position, cond, truestat, 
			parse_statement(false, true));
	}
	else
	{
		tok_unget(next_token);
		return new ast_statement_if(cur_token.position, cond, truestat);
	}
}
break;
@

\subsection{return statements}
There are two types of returns, those that return values, and those that do not. We recognize those that do not by the semicolon directly following the return.
<<parse return>>=
case TOKEN_RETURN:
{
	next_token = tok_get();
	if (next_token.type != TOKEN_SEMICOLON)
	{
		tok_unget(next_token);
		ast_expression *value = parse_expression();
		match_token(TOKEN_SEMICOLON);
		return new ast_statement_return(cur_token.position, value);
	}
	else
	{
		return new ast_statement_return(cur_token.position);
	}
}
break;
@

\subsection{Statement blocks}
If we find an eof while checking whether we are at the end, something is wrong and we should wrap up.
<<parse block>>=
case TOKEN_CURLYBRACKET_LEFT:
{
	next_token = tok_get();
	vector<ast_statement*> stats;
	while (next_token.type != TOKEN_CURLYBRACKET_RIGHT)
	{
		if (next_token.type == TOKEN_CURLYBRACKET_LEFT)
		{
			// nested block cant have vardecl
			vardecl_allowed = false;
		}
		tok_unget(next_token);
		if (next_token.type == TOKEN_EOF)
		{
			parse_error(next_token.position, "Missing } at end of file.");
			break;
		}
		ast_statement *stat = parse_statement(vardecl_allowed, false);
		
		// after first non-vardecl vardecls no longer allowed
		if (typeid(stat) != typeid(ast_statement_vardecl))
			vardecl_allowed = false;
			
		stats.push_back(stat);
		next_token = tok_get();
	}
	return new ast_statement_block(cur_token.position, stats);
}
break;
@

\subsection{while statements}
A while is the simple one:
<<parse while>>=
case TOKEN_WHILE:
{
	match_token(TOKEN_ROUNDBRACKET_LEFT);
	ast_expression *cond = parse_expression();
	match_token(TOKEN_ROUNDBRACKET_RIGHT);
	return new ast_statement_while(cur_token.position, cond,
		parse_statement(false, false));
}
break;
@

\section{Parsing programs}
Representing the whole program is a single top-level object, containing two lists, variable definitions and function definitions. Variable declarations can be handled as statements, so do that (saves code later on). Functions need something new.
<<program ast>>=
class ast_funarg : public ast_base
{
public:
	ast_type *type;
	std::string name;
	
	ast_funarg(ast_type *t, std::string n)
		{ position = t->position; type = t; name = n; }
	virtual ~ast_funarg() { delete type; }
	virtual void print(int tabdepth)
	{
		type->print(tabdepth);
		printf(" %s", name.c_str());
	}
};
class ast_fundecl : public ast_base
{
public:
	ast_type *type;
	std::string name;
	std::vector<ast_funarg*> args;
	ast_statement *body;
	
	ast_fundecl(ast_type *t, std::string n, std::vector<ast_funarg*> a, 
	                                                   ast_statement* b) 
		{ position = t->position; type = t; name = n; args = a; body = b; }
	virtual ~ast_fundecl()
	{
		delete type;
		delete body;
		for (auto ptr : args) delete ptr;
	}
	virtual void print(int tabdepth)
	{
		type->print(tabdepth);
		printf(" %s(", name.c_str());
		bool is_firstarg = true;
		for (auto ptr : args)
		{
			if (is_firstarg)
				is_firstarg = false;
			else
				printf(",");
			ptr->print(tabdepth);
		}
		printf(") ");
		body->print(tabdepth);
	}
};
class ast_program : public ast_base
{
public:
	std::vector<ast_statement_vardecl*> globalvars;
	std::vector<ast_fundecl*> functions;
	
	ast_program(std::vector<ast_statement_vardecl*>vars, 
	                      std::vector<ast_fundecl*> funs) 
		{ globalvars = vars; functions = funs; }
	virtual ~ast_program()
	{
		for (auto ptr : globalvars) delete ptr;
		for (auto ptr : functions) delete ptr;
	}
	virtual void print(int tabdepth)
	{
		for (auto ptr : globalvars)
		{
			ptr->print(tabdepth);
		}
		for (auto ptr : functions)
		{
			ptr->print(tabdepth);
		}
	}
};
@

Whole program parsing is the only thing left to do. It is relatively simple compared to statement parsing, as there are only two things that we see. However, both start with a type followed by an identifier, so we cannot simply check the first symbol to see what it is. However, because parsing of the "type identifier" segment does not depend on whether we have a function declaration or a variable declaration, we can simply defer the decision till after parsing those.
<<parse program header>>=
ast_program *parse_program();
@
<<parse program>>=
ast_program *parse_program()
{
	// accumulator for results
	vector<ast_statement_vardecl*> globalvariables;
	vector<ast_fundecl*> functions;	
	
	// check for eof
	token cur_token = tok_get();
	while (cur_token.type != TOKEN_EOF)
	{
		tok_unget(cur_token);
		
		ast_type *type = parse_type();
		
		cur_token = tok_get();
		string name;
		if (cur_token.type == TOKEN_ID)
		{
			name = cur_token.id;
		}
		else
		{
			parse_error(cur_token.position, 
				"Unexpected %s, expected identifier.", 
				token_name(cur_token).c_str());
			tok_unget(cur_token);
			name = "<missing>";
		}
		
		cur_token = tok_get();
		switch(cur_token.type)
		{
		<<parse function>>
		<<parse global vardecl>>
		default:
			parse_error(cur_token.position, 
				"Unexpected %s, expected a function or variable definition", 
				token_name(cur_token).c_str());
			break;
		}
		
		cur_token = tok_get();
	}
	
	return new ast_program(globalvariables, functions);
}
@

Vardecls are straightforward at the global level, since there is nothing that looks similar, but is parsed different.
<<parse global vardecl>>=
case TOKEN_ASSIGN:
{
	ast_expression *value = parse_expression();
	match_token(TOKEN_SEMICOLON);
	globalvariables.push_back(new ast_statement_vardecl(type, name, value));
}
break;
@

Functions need a block statement as their body according to the doc, so verify that. Furthermore, vardecls are allowed in the start of that 
<<parse function>>=
case TOKEN_ROUNDBRACKET_LEFT:
{
	vector<ast_funarg*> arguments;
	cur_token = tok_get();
	bool is_first_arg = true;
	if (cur_token.type != TOKEN_ROUNDBRACKET_RIGHT)
	{
		tok_unget(cur_token);
		do
		{
			arguments.push_back(parse_funarg());
			cur_token = tok_get();
		}
		while (cur_token.type == TOKEN_COMMA);
	}
	
	if (cur_token.type != TOKEN_ROUNDBRACKET_RIGHT)
	{
		parse_error(cur_token.position, "Missing )");
		tok_unget(cur_token);
	}
	
	cur_token = tok_get();
	if (cur_token.type != TOKEN_CURLYBRACKET_LEFT)
		parse_error(cur_token.position, 
			"Missing {, functions can only have blocks as body.");
	tok_unget(cur_token);
	
	ast_statement *body = parse_statement(true, false);
	
	if (typeid(*body) != typeid(ast_statement_block))
	{
		parse_error(body->position, 
			"Body of function should be block (internal compiler error)");
	}
	else
	{
		ast_statement_block *b = (ast_statement_block*)body;
		if (b->body.size() == 0 || 
			(strict_vardecl && typeid(b->body.back()) == typeid(ast_statement_vardecl)))
			parse_error(body->position, 
				"Body of function should contain at least one statement.");
	}
	
	functions.push_back(new ast_fundecl(type, name, arguments, 
		body));
}
break;
@

Parsing function arguments is simple:
<<parse funarg>>=
ast_funarg *parse_funarg()
{
	ast_type * type = parse_type();
	token cur_token = tok_get();
	if (cur_token.type != TOKEN_ID)
	{
		parse_error(cur_token.position, 
			"Unexpected %s, expected argument name", 
			token_name(cur_token).c_str());
		tok_unget(cur_token);
		return new ast_funarg(type, "<missing>");
	}
	return new ast_funarg(type, cur_token.id);
}
@

\section{Auxilary functions}
Matching a token we know should be there, and that does not contain additional info, is a fairly common task. Generating error messages for them is also not difficult, hence it is usefull to make a single function handling this.
<<match token>>=
void match_token(token_type t)
{
	token cur_token = tok_get();
	
	if (cur_token.type != t)
	{
		// most likely the needed token is missing, so correct on that assumption
		tok_unget(cur_token);
		
		// to generate the error message we need a full token, not just a type, 
		//  so build one
		token expected_token;
		expected_token.type = t;
		expected_token.id = "";
		expected_token.charval = ' ';
		expected_token.intval = 0;
		
		// Error
		parse_error(cur_token.position, 
			"Missing %s", token_name(expected_token).c_str());
	}
}
@

\section{Error handling}
<<parser error handling>>=
void parse_warning(source_position pos, const char *message, ...)
{
	va_list args;
	va_start(args, message);
	
	eh_warning(pos, message, args);
	
	va_end(args);
}
void parse_error(source_position pos, const char *message, ...)
{
	va_list args;
	va_start(args, message);
	
	eh_error(pos, message, args);
	
	va_end(args);
}
void parse_fatal(source_position pos, const char *message, ...)
{
	va_list args;
	va_start(args, message);
	
	eh_error(pos, message, args);
	
	va_end(args);
	
	exit(1);
}
@

\section{Source and headers}
<<ast.h>>=
#ifndef AST_H
#define AST_H
#include "position.h"
#include <cstdio>
#include <string>
#include <vector>
#include <typeinfo>

<<ast base>>
<<type expression ast>>
<<expression ast>>
<<lvalue ast>>
<<statement ast>>
<<program ast>>
#endif
@
<<ast.cpp>>=
#include "ast.h"
using namespace std;

<<expression ast implementation>>
@

<<parser.h>>=
#ifndef PARSER_H
#define PARSER_H
#include "ast.h"

<<type parsing header>>
<<parse expression header>>
<<parse statement header>>
<<parse program header>>
#endif
@
<<parser.cpp>>=
#include "parser.h"
#include "token.h"
#include "error.h"
#include "settings.h"
#include <cstdarg>
#include <typeinfo>

using namespace std;

<<parser error handling>>
<<match token>>
<<parse type expression>>

<<parse opl0>>
<<parse opl1>>
<<parse opl2>>
<<parse opl3>>
<<parse opl4>>
<<parse opl5>>
<<parse opl6>>
<<parse expression>>

<<parse lvalue>>

<<parse statement>>

<<parse funarg>>
<<parse program>>
@

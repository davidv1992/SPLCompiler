%header for tex generation using noweb. This allows me to put in extra packages
\documentclass{report}
\usepackage{amsmath}
\usepackage{mathpartir}
\usepackage{noweb}
\usepackage[margin=1.5in]{geometry}
\usepackage{textcomp}
\usepackage{hyperref}
\usepackage{longtable}
\usepackage{hyphenat}
\newcommand{\nonterm}[1]{\textlangle #1\textrangle}
\newcommand{\bor}{\textbar}
\newcommand{\term}[1]{'\textbf{#1}'}
\newcommand{\uterm}[1]{\textbf{#1}}
\pagestyle{noweb}\noweboptions{}
\title{SPL compiler}
\author{David Venhoek}
\begin{document}
@

\maketitle
\tableofcontents

\chapter*{Introduction}

Before you is the pretty-printed version of the sourcecode of my SPL compiler. This document contains all the modules that are part of the compiler. If you are looking for the test programs and their supporting infrastructure, these can be found in a seperate document, test.pdf.

The compiler proper consists of 5 major modules, and their supporting code. The tokenizer (chapter \ref{ch:tokenizer}) and parser (chapter \ref{ch:parser}) together process the input file and produce an abstract syntax tree, described in chapter \ref{ch:ast}. This abstract syntax tree is typechecked and decorated with types by the typechecker (chapter \ref{ch:typechecker}).

At this point the resulting abstract syntax tree is known to represent a valid SPL program, and we proceed to code generation. Code generation is done in two stages. The IR generator (chapter \ref{ch:irgenerator}) produces code in an intermediate representation described in (chapter \ref{ch:ir}). This is then combined with the IR for the platform independent parts of the runtime library (chapter \ref{ch:splruntime}) to form the completed program in IR form.

The final step is to translate this IR to platform-specific assembly code. Currently only the AMD64 platform (chapter \ref{ch:amd64}) is supported. This translator translates the IR and adds platform-specific support code.

\section*{How to read this document}

This document contains both the source code, and the rational for how it is written. The start of each chapter usually contains most of the rationale for how a module is written. The rest of the chapter then focusses on the smaller details and the source code itself.

For reading, when the goal is just to get a general feel for how the compiler is structured, it is advisable to start by only reading the first few sections of each chapter, ignoring the sections dealing with the actual implementation. You can then later come back to those sections should you want more detail.

Chapter \ref{ch:spllang} is an exception to this. It contains a summary of all the information given on the SPL language during the course. It also contains a treatise on all the problems with this ``specification'', and all the design choices with respect to the language made over the course of writing this compiler. It can be read seperate from the rest of the compiler, and is meant primarily as a reference on the SPL language.
